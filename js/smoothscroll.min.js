"use strict";
function polyfill() {
    var t, n, a, r, d, e = window, s = document;
    if ("scrollBehavior"in s.documentElement.style && e.__forceSmoothScrollPolyfill__ !== !0)
        return;
    t = e.HTMLElement || e.Element,
    d = 468,
    n = {
        scroll: e.scroll || e.scrollTo,
        scrollBy: e.scrollBy,
        elementScroll: t.prototype.scroll || h,
        scrollIntoView: t.prototype.scrollIntoView
    },
    r = e.performance && e.performance.now ? e.performance.now.bind(e.performance) : Date.now;
    function m(e) {
        var t = ["MSIE ", "Trident/", "Edge/"];
        return new RegExp(t.join("|")).test(e)
    }
    a = m(e.navigator.userAgent) ? 1 : 0;
    function h(e, t) {
        this.scrollLeft = e,
        this.scrollTop = t
    }
    function g(e) {
        return .5 * (1 - Math.cos(Math.PI * e))
    }
    function o(e) {
        if (e === null || typeof e != "object" || e.behavior === void 0 || e.behavior === "auto" || e.behavior === "instant")
            return !0;
        if (typeof e == "object" && e.behavior === "smooth")
            return !1;
        throw new TypeError("behavior member of ScrollOptions " + e.behavior + " is not a valid value for enumeration ScrollBehavior.")
    }
    function u(e, t) {
        if (t === "Y")
            return e.clientHeight + a < e.scrollHeight;
        if (t === "X")
            return e.clientWidth + a < e.scrollWidth
    }
    function c(t, n) {
        var s = e.getComputedStyle(t, null)["overflow" + n];
        return s === "auto" || s === "scroll"
    }
    function f(e) {
        var t = u(e, "Y") && c(e, "Y")
          , n = u(e, "X") && c(e, "X");
        return t || n
    }
    function p(e) {
        for (; e !== s.body && f(e) === !1; )
            e = e.parentNode || e.host;
        return e
    }
    function l(t) {
        var a = r()
          , n = (a - t.startTime) / d
          , n = n > 1 ? 1 : n
          , s = g(n)
          , o = t.startX + (t.x - t.startX) * s
          , i = t.startY + (t.y - t.startY) * s;
        t.method.call(t.scrollable, o, i),
        (o !== t.x || i !== t.y) && e.requestAnimationFrame(l.bind(e, t))
    }
    function i(t, o, i) {
        var a, c, d, u, m = r();
        t === s.body ? (a = e,
        c = e.scrollX || e.pageXOffset,
        d = e.scrollY || e.pageYOffset,
        u = n.scroll) : (a = t,
        c = t.scrollLeft,
        d = t.scrollTop,
        u = h),
        l({
            scrollable: a,
            method: u,
            startTime: m,
            startX: c,
            startY: d,
            x: o,
            y: i
        })
    }
    e.scroll = e.scrollTo = function() {
        if (arguments[0] === void 0)
            return;
        if (o(arguments[0]) === !0) {
            n.scroll.call(e, arguments[0].left !== void 0 ? arguments[0].left : typeof arguments[0] != "object" ? arguments[0] : e.scrollX || e.pageXOffset, arguments[0].top !== void 0 ? arguments[0].top : arguments[1] !== void 0 ? arguments[1] : e.scrollY || e.pageYOffset);
            return
        }
        i.call(e, s.body, arguments[0].left !== void 0 ? ~~arguments[0].left : e.scrollX || e.pageXOffset, arguments[0].top !== void 0 ? ~~arguments[0].top : e.scrollY || e.pageYOffset)
    }
    ,
    e.scrollBy = function() {
        if (arguments[0] === void 0)
            return;
        if (o(arguments[0])) {
            n.scrollBy.call(e, arguments[0].left !== void 0 ? arguments[0].left : typeof arguments[0] != "object" ? arguments[0] : 0, arguments[0].top !== void 0 ? arguments[0].top : arguments[1] !== void 0 ? arguments[1] : 0);
            return
        }
        i.call(e, s.body, ~~arguments[0].left + (e.scrollX || e.pageXOffset), ~~arguments[0].top + (e.scrollY || e.pageYOffset))
    }
    ,
    t.prototype.scroll = t.prototype.scrollTo = function() {
        if (arguments[0] === void 0)
            return;
        if (o(arguments[0]) === !0) {
            if (typeof arguments[0] == "number" && arguments[1] === void 0)
                throw new SyntaxError("Value could not be converted");
            n.elementScroll.call(this, arguments[0].left !== void 0 ? ~~arguments[0].left : typeof arguments[0] != "object" ? ~~arguments[0] : this.scrollLeft, arguments[0].top !== void 0 ? ~~arguments[0].top : arguments[1] !== void 0 ? ~~arguments[1] : this.scrollTop);
            return
        }
        var e = arguments[0].left
          , t = arguments[0].top;
        i.call(this, this, typeof e == "undefined" ? this.scrollLeft : ~~e, typeof t == "undefined" ? this.scrollTop : ~~t)
    }
    ,
    t.prototype.scrollBy = function() {
        if (arguments[0] === void 0)
            return;
        if (o(arguments[0]) === !0) {
            n.elementScroll.call(this, arguments[0].left !== void 0 ? ~~arguments[0].left + this.scrollLeft : ~~arguments[0] + this.scrollLeft, arguments[0].top !== void 0 ? ~~arguments[0].top + this.scrollTop : ~~arguments[1] + this.scrollTop);
            return
        }
        this.scroll({
            left: ~~arguments[0].left + this.scrollLeft,
            top: ~~arguments[0].top + this.scrollTop,
            behavior: arguments[0].behavior
        })
    }
    ,
    t.prototype.scrollIntoView = function() {
        if (o(arguments[0]) === !0) {
            n.scrollIntoView.call(this, arguments[0] === void 0 || arguments[0]);
            return
        }
        var t = p(this)
          , a = t.getBoundingClientRect()
          , r = this.getBoundingClientRect();
        t !== s.body ? (i.call(this, t, t.scrollLeft + r.left - a.left, t.scrollTop + r.top - a.top),
        e.getComputedStyle(t).position !== "fixed" && e.scrollBy({
            left: a.left,
            top: a.top,
            behavior: "smooth"
        })) : e.scrollBy({
            left: r.left,
            top: r.top,
            behavior: "smooth"
        })
    }
}
typeof exports == "object" && typeof module != "undefined" ? module.exports = {
    polyfill
} : polyfill()
